import { createContext, useMemo, useReducer } from 'react';
import { {{pascalCase name}}ActionsType, {{pascalCase name}}StateType } from './{{pascalCase name}}.types';
import { {{camelCase name}}Reducer } from './{{pascalCase name}}.reducer';


export const {{pascalCase name}}State = createContext<{{pascalCase name}}StateType>({} as {{pascalCase name}}StateType);
export const {{pascalCase name}}Actions = createContext<{{pascalCase name}}ActionsType>({} as {{pascalCase name}}ActionsType);


const INITIAL_STATE = {
  count: 0,
};


export function {{pascalCase name}}Provider({
  children,
  initialState = INITIAL_STATE,
}: {
  children: React.ReactNode;
  initialState: {{pascalCase name}}StateType;
}) {

  const [state, dispatch] = useReducer({{camelCase name}}Reducer, {
    ...initialState,
  });


  const customAction = async (payload: number) => {
    dispatch({ type: 'set', payload });
    await new Promise((resolve) => {
      setTimeout(resolve, 1000);
    });
    dispatch({ type: 'increment' });
  };


  const actionsValue = useMemo(
    (): {{pascalCase name}}ActionsType => ({
      increment: () => dispatch({ type: 'increment' }),
      set: (payload: number) => dispatch({ type: 'set', payload }),
      customAction,
    }),
    [],
  );

  return (
    <{{pascalCase name}}State.Provider value={state}>
      <{{pascalCase name}}Actions.Provider value={actionsValue}>{children}</{{pascalCase name}}Actions.Provider>
    </{{pascalCase name}}State.Provider>
  );
}
